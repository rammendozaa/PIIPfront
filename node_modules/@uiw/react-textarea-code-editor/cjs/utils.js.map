{
  "version": 3,
  "sources": [
    "../src/utils.ts"
  ],
  "names": [
    "processHtml",
    "html",
    "plugins",
    "rehypePrism",
    "ignoreMissing",
    "data",
    "fragment",
    "use",
    "processSync",
    "toString",
    "htmlEncode",
    "sHtml",
    "replace",
    "str",
    "c",
    "stopPropagation",
    "e",
    "preventDefault"
  ],
  "mappings": ";;;;;;;;;;;;;AACA;;AAEA;;AADA;AAGO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAqF;AAAA,MAAtEC,OAAsE,uEAA7C,CAAC,CAACC,oBAAD,EAAc;AAAEC,IAAAA,aAAa,EAAE;AAAjB,GAAd,CAAD,CAA6C;AAC9G,SAAO,sBACJC,IADI,CACC,UADD,EACa;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GADb,EAEJC,GAFI,kCAEIL,OAFJ,GAGJM,WAHI,WAGWP,IAHX,GAIJQ,QAJI,EAAP;AAKD,CANM;;;;AAQA,SAASC,UAAT,CAAoBC,KAApB,EAAmC;AACxC,SAAOA,KAAK,CACTC,OADI,CACI,qDADJ,EAC2D,UAACC,GAAD,EAAiB;AAC/E,WAAOA,GAAG,CAACD,OAAJ,CACL,QADK,EAEL,UAACE,CAAD;AAAA,aAAiB;AAAE,aAAK,MAAP;AAAe,aAAK,MAApB;AAA4B,aAAK,OAAjC;AAA0C,aAAK;AAA/C,OAAD,CAAsFA,CAAtF,CAAhB;AAAA,KAFK,CAAP;AAID,GANI,EAOJF,OAPI,CAQH,QARG,EASH,UAACE,CAAD;AAAA,WAAiB;AAAE,WAAK,MAAP;AAAe,WAAK,MAApB;AAA4B,WAAK,OAAjC;AAA0C,WAAK;AAA/C,KAAD,CAAsFA,CAAtF,CAAhB;AAAA,GATG,CAAP;AAWD;;AAEM,SAASC,eAAT,CAAyBC,CAAzB,EAAsE;AAC3EA,EAAAA,CAAC,CAACD,eAAF;AACAC,EAAAA,CAAC,CAACC,cAAF;AACD",
  "sourcesContent": [
    "import { PluggableList } from 'unified';\nimport { rehype } from 'rehype';\n// @ts-ignore\nimport rehypePrism from '@mapbox/rehype-prism';\n\nexport const processHtml = (html: string, plugins: PluggableList = [[rehypePrism, { ignoreMissing: true }]]) => {\n  return rehype()\n    .data('settings', { fragment: true })\n    .use([...plugins])\n    .processSync(`${html}`)\n    .toString();\n};\n\nexport function htmlEncode(sHtml: string) {\n  return sHtml\n    .replace(/```(tsx?|jsx?|html|xml)(.*)\\s+([\\s\\S]*?)(\\s.+)?```/g, (str: string) => {\n      return str.replace(\n        /[<&\"]/g,\n        (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n      );\n    })\n    .replace(\n      /[<&\"]/g,\n      (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n    );\n}\n\nexport function stopPropagation(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n"
  ]
}